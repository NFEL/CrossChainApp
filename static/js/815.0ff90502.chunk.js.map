{"version":3,"file":"static/js/815.0ff90502.chunk.js","mappings":"0QAQMA,EAAkBC,OAAOC,OAAOC,EAAAA,IA4BtC,SAASC,EAASC,EAASC,GACvB,IA3BkCC,EAAOC,EA2BzC,GA3BkCD,EA2ByBD,EA3BlBE,EA2B2BH,EA1B7D,CACHI,OAAQC,EAAAA,GAAUH,GAClBI,UAAWD,EAAAA,GAAUH,GAAOK,KAAI,SAACC,GAC7B,MAAqB,8CAAjBA,EAAMR,QACC,CACHS,cAAeD,EAAMR,QACrBU,kBAAmBC,EAAAA,GACnBC,aAAc,YACdC,KAAM,CAACV,GACPF,QAASC,GAIN,CACHO,cAAe,6CACfC,kBAAmBI,EAAAA,GACnBF,aAAc,gBACdC,KAAM,CAACV,GACPF,QAASC,QAQjBI,EAAR,EAAQA,UAAWF,EAAnB,EAAmBA,OACLW,GAAaC,EAAAA,EAAAA,IAAiB,CACxCV,UAAAA,EACAW,cAAc,EACdC,UAAU,IAHNC,KAOFC,EAAc,GACpB,GAAIL,EACA,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAASO,OAAQD,IAAK,CACtC,IAAME,EAAUR,EAASM,GACzB,GAAe,MAAXE,GACIC,OAAOD,GAAW,EAAG,CACrB,IAAMf,EAAQJ,EAAOiB,GACrBD,EAAYK,MAAZ,QACIF,QAAAA,EACAtB,QAAAA,GACGO,KAOvB,OAAOY,EAkBJ,IAAMM,EAAkB,SAACC,GAE5B,OADAC,QAAQC,IAAI,CAAEF,MAAAA,IAhBlB,WACI,IAAQ3B,GAAY8B,EAAAA,EAAAA,MAAZ9B,QACF+B,EAAgB,GAUtB,OATApC,EAAgBqC,SAAQ,SAAC9B,GACrB,IAGIH,EAASC,EAASE,EAAM+B,IAAID,SAAQ,SAACE,GAAD,OAASH,EAAcN,KAAKS,MAClE,MAAOC,GACLP,QAAQC,IAAIM,OAGbJ,EAKAK,I,WCRX,MArEA,SAAsBT,GAEpB,IAAMU,EAASX,EAAgBC,GAEvBW,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAU,CACd,CACEC,MAAO,GACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAACC,GAAD,OACN,gBACEC,IAAKD,GAAQ,mDACbE,IAAI,SACJC,MAAM,OACNC,OAAO,WAIb,CACER,MAAO,OACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAACM,GAAD,OAAUA,IAEpB,CACET,MAAO,SACPC,UAAW,SACXC,IAAK,SACLC,OAAQ,SAACO,GAAD,OAAYA,IAEtB,CACEV,MAAO,UACPC,UAAW,UACXC,IAAK,UACLC,OAAQ,SAACQ,EAAOC,GAAR,aACNC,WAAU,OAAChB,QAAD,IAACA,GAAD,UAACA,EAASiB,aAAV,aAAC,EAAgBC,QAAQJ,EAAOC,EAAKI,WAAWC,QAAQ,KAEtE,CACEjB,MAAO,UACPC,UAAW,UACXC,IAAK,UACLC,OAAQ,SAAC5C,GAAD,OAAa2D,EAAAA,EAAAA,IAAe3D,EAAS,KAG/C,CACEyC,MAAO,QACPC,UAAW,UACXC,IAAK,UACLC,OAAQ,SAAC3C,GAAD,OAAa2D,OAAO3D,GAAS4D,iBAIzC,OACE,iBAAKC,MAAO,CAAEd,MAAO,OAAQe,QAAS,QAAtC,WACE,wDACA,SAAC,IAAD,CAAUC,SAAU3B,EAApB,UACE,SAAC,IAAD,CACE4B,WAAY5B,EACZG,QAASA,EACT0B,OAAQ,SAACC,GACP,OAAOA,EAAOC","sources":["utils/ERC20Balances.js","components/ERC20Balance.jsx"],"sourcesContent":["import {\n    useContractReads,\n    erc20ABI,\n    useAccount,\n} from \"wagmi\";\nimport { chainList, tokenList, MultiCallABI } from \"../Constants\";\n\n\nconst supportedChains = Object.values(chainList);\n\nconst tokenContractsChainSeparated = (chain, walletAddress) => {\n    return {\n        tokens: tokenList[chain],\n        contracts: tokenList[chain].map((token) => {\n            if (token.address != \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\") {\n                return {\n                    addressOrName: token.address,\n                    contractInterface: erc20ABI,\n                    functionName: \"balanceOf\",\n                    args: [walletAddress],\n                    chainId: chain,\n                };\n            } else {\n                //https:etherscan.io/address/0xca11bde05977b3631167028862be2a173976ca11#readContract#F9\n                return {\n                    addressOrName: \"0xca11bde05977b3631167028862be2a173976ca11\",\n                    contractInterface: MultiCallABI,\n                    functionName: \"getEthBalance\",\n                    args: [walletAddress],\n                    chainId: chain,\n                };\n            }\n        }),\n    };\n};\n\nfunction Balances(address, chainId) {\n    const { contracts, tokens } = tokenContractsChainSeparated(chainId, address);\n    const { data: balances } = useContractReads({\n        contracts,\n        allowFailure: true,\n        suspense: true,\n        // watch: true,\n        // cacheOnBlock: true,\n    });\n    const resBalances = [];\n    if (balances) {\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            if (balance != null) {\n                if (Number(balance) > 0) {\n                    const token = tokens[i];\n                    resBalances.push({\n                        balance,\n                        chainId,\n                        ...token,\n\n                    });\n                }\n            }\n        }\n    }\n    return resBalances;\n}\n\nfunction Profile() {\n    const { address } = useAccount();\n    const profileResult = [];\n    supportedChains.forEach((chain) => {\n        try {\n            // profileResult[chain] = Balances(address, chain.id);\n            // profileResult Balances(address, chain.id);\n            Balances(address, chain.id).forEach((blc) => profileResult.push(blc))\n        } catch (error) {\n            console.log(error);\n        }\n    });\n    return profileResult;\n}\n\nexport const getUserBalances = (props) => {\n    console.log({ props });\n    return Profile()\n\n}\n\n","import { useMoralis } from \"react-moralis\";\nimport { Skeleton, Table } from \"antd\";\nimport { getEllipsisTxt } from \"../helpers/formatters\";\nimport { getUserBalances } from \"./../utils/ERC20Balances\";\n\nfunction ERC20Balance(props) {\n  // const { data: assets } = useERC20Balances(props);\n  const assets = getUserBalances(props);\n  // console.log({ props, assets });\n  const { Moralis } = useMoralis();\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"logo\",\n      key: \"logo\",\n      render: (logo) => (\n        <img\n          src={logo || \"https://etherscan.io/images/main/empty-token.png\"}\n          alt=\"nologo\"\n          width=\"28px\"\n          height=\"28px\"\n        />\n      ),\n    },\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n      render: (name) => name,\n    },\n    {\n      title: \"Symbol\",\n      dataIndex: \"symbol\",\n      key: \"symbol\",\n      render: (symbol) => symbol,\n    },\n    {\n      title: \"Balance\",\n      dataIndex: \"balance\",\n      key: \"balance\",\n      render: (value, item) =>\n        parseFloat(Moralis?.Units?.FromWei(value, item.decimals)).toFixed(6),\n    },\n    {\n      title: \"Address\",\n      dataIndex: \"address\",\n      key: \"address\",\n      render: (address) => getEllipsisTxt(address, 5),\n    },\n\n    {\n      title: \"Chain\",\n      dataIndex: \"chainId\",\n      key: \"chainId\",\n      render: (chainId) => String(chainId).toUpperCase(),\n    },\n  ];\n\n  return (\n    <div style={{ width: \"65vw\", padding: \"15px\" }}>\n      <h1>ðŸ’°Token Balances</h1>\n      <Skeleton loading={!assets}>\n        <Table\n          dataSource={assets}\n          columns={columns}\n          rowKey={(record) => {\n            return record.token_address;\n          }}\n        />\n      </Skeleton>\n    </div>\n  );\n}\nexport default ERC20Balance;\n"],"names":["supportedChains","Object","values","chainList","Balances","address","chainId","chain","walletAddress","tokens","tokenList","contracts","map","token","addressOrName","contractInterface","erc20ABI","functionName","args","MultiCallABI","balances","useContractReads","allowFailure","suspense","data","resBalances","i","length","balance","Number","push","getUserBalances","props","console","log","useAccount","profileResult","forEach","id","blc","error","Profile","assets","Moralis","useMoralis","columns","title","dataIndex","key","render","logo","src","alt","width","height","name","symbol","value","item","parseFloat","Units","FromWei","decimals","toFixed","getEllipsisTxt","String","toUpperCase","style","padding","loading","dataSource","rowKey","record","token_address"],"sourceRoot":""}